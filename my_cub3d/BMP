static void		creaty_bmp(t_ptr *ptr, int fd, char *filename)
{
	unsigned char			*file_header;
	unsigned char			*bitmap_header;

	fd = open(filename, O_RDONLY);
	start_render(ptr, fd);
	close(fd);
	fd = open("cub3D.bmp", O_CREAT | O_RDWR, 416);
	file_header = create_file_header(ptr->p->y - 1, ptr->p->x);
	bitmap_header = create_bitmap_header(ptr->p->y - 1, ptr->p->x);
	write(fd, file_header, 14);
	write(fd, bitmap_header, 40);
	push_img_to_bmp(ptr, fd);
	close(fd);
	close_win();
}
static void		start_render(t_ptr *ptr, int fd)
{
	init_check_struct(ptr);
	get_param_objects(fd, ptr);
	before_game_init(ptr);
	ptr->img[0]->img_ptr = mlx_new_image(ptr->m->mlx_ptr, ptr->p->x,
	ptr->p->y);
	ptr->img[0]->img_data = mlx_get_data_addr(ptr->img[0]->img_ptr,
	&ptr->img[0]->bpp, &ptr->img[0]->size_line, &ptr->img[0]->endian);
	run_dda(ptr);
	mlx_put_image_to_window(ptr->m->mlx_ptr, ptr->m->win_ptr,
	ptr->img[0]->img_ptr, 0, 0);
}

unsigned char	*create_file_header(int res_y, int res_x)
{
	int						nb_octet;
	static unsigned char	bmp_file_header[] = {
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	};
	int						padding;

	padding = (4 - (res_x * 3) % 4) % 4;
	nb_octet = 14 + 40 + (3 * res_x + padding) * res_y;
	bmp_file_header[0] = (unsigned char)('B');
	bmp_file_header[1] = (unsigned char)('M');
	bmp_file_header[2] = (unsigned char)(nb_octet);
	bmp_file_header[3] = (unsigned char)(nb_octet >> 8);
	bmp_file_header[4] = (unsigned char)(nb_octet >> 16);
	bmp_file_header[5] = (unsigned char)(nb_octet >> 24);
	bmp_file_header[10] = (unsigned char)(54);
	return (bmp_file_header);
}

unsigned char	*create_bitmap_header(int res_y, int res_x)
{
	static unsigned char	bmp_bitmap_header[] = {
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	};

	bmp_bitmap_header[0] = (unsigned char)(40);
	bmp_bitmap_header[4] = (unsigned char)(res_x);
	bmp_bitmap_header[5] = (unsigned char)(res_x >> 8);
	bmp_bitmap_header[6] = (unsigned char)(res_x >> 16);
	bmp_bitmap_header[7] = (unsigned char)(res_x >> 24);
	bmp_bitmap_header[8] = (unsigned char)(res_y);
	bmp_bitmap_header[9] = (unsigned char)(res_y >> 8);
	bmp_bitmap_header[10] = (unsigned char)(res_y >> 16);
	bmp_bitmap_header[11] = (unsigned char)(res_y >> 24);
	bmp_bitmap_header[12] = (unsigned char)(1);
	bmp_bitmap_header[14] = (unsigned char)(3 * 8);
	return (bmp_bitmap_header);
}

static void		push_img_to_bmp(t_ptr *ptr, int fd)
{
	unsigned char	rgb[3];
	int				i;
	int				j;
	int				max_x;
	int				max_y;

	i = 0;
	max_y = ptr->p->y - 1;
	while (i < max_y)
	{
		max_x = ptr->p->x;
		j = 0;
		while (j < max_x)
		{
			rgb[0] = ptr->img[0]->img_data[j * ptr->img[0]->bpp / 8 +
			ptr->img[0]->size_line * max_y];
			rgb[1] = ptr->img[0]->img_data[(j * ptr->img[0]->bpp / 8 +
			ptr->img[0]->size_line * max_y) + 1];
			rgb[2] = ptr->img[0]->img_data[(j * ptr->img[0]->bpp / 8 +
			ptr->img[0]->size_line * max_y) + 2];
			write(fd, rgb, 3);
			j++;
		}
		max_y--;
	}
}
